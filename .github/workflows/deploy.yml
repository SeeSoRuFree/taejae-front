name: Deploy to NCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      description:
        description: 'Deploy Description'
        required: false
        type: string

  push:
    branches:
      - release/dev
      - release/prod

env:
  NODE_VERSION: '22.18.0'
  DOCKER_BUILDKIT: 1

jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # Handle workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.environment }}" == "dev" ]]; then
              echo "ENVIRONMENT=dev" >> $GITHUB_ENV
              echo "NCP_REGISTRY=cr-dev-taejae-univ-frontend.ncr.gov-ntruss.com" >> $GITHUB_ENV
              echo "IMAGE_TAG=dev-${{ github.sha }}" >> $GITHUB_ENV
            elif [[ "${{ inputs.environment }}" == "prod" ]]; then
              echo "ENVIRONMENT=prod" >> $GITHUB_ENV
              echo "NCP_REGISTRY=cr-prod-taejae-univ-frontend.ncr.gov-ntruss.com" >> $GITHUB_ENV
              echo "IMAGE_TAG=prod-${{ github.sha }}" >> $GITHUB_ENV
            fi
          # Handle push and PR events
          elif [[ "${{ github.ref }}" == "refs/heads/release/dev" ]] || [[ "${{ github.base_ref }}" == "release/dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "NCP_REGISTRY=cr-dev-taejae-univ-frontend.ncr.gov-ntruss.com" >> $GITHUB_ENV
            echo "IMAGE_TAG=dev-${{ github.sha }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/release/prod" ]] || [[ "${{ github.base_ref }}" == "release/prod" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "NCP_REGISTRY=cr-prod-taejae-univ-frontend.ncr.gov-ntruss.com" >> $GITHUB_ENV
            echo "IMAGE_TAG=prod-${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test --if-present

      - name: Build application
        run: npm run build

      - name: Login to NCP Container Registry
        run: |
          echo "${{ secrets.NCP_SECRET_KEY }}" | sudo docker login \
            ${{ env.NCP_REGISTRY }} \
            -u "${{ secrets.NCP_ACCESS_KEY }}" \
            --password-stdin

      - name: Build Docker image
        run: |
          sudo docker build \
            --build-arg NODE_ENV=${{ env.ENVIRONMENT }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ env.IMAGE_TAG }} \
            -t ${{ env.NCP_REGISTRY }}/taejae-frontend:${{ env.IMAGE_TAG }} \
            -t ${{ env.NCP_REGISTRY }}/taejae-frontend:latest-${{ env.ENVIRONMENT }} \
            .

      - name: Push Docker image
        run: |
          sudo docker push ${{ env.NCP_REGISTRY }}/taejae-frontend:${{ env.IMAGE_TAG }}
          sudo docker push ${{ env.NCP_REGISTRY }}/taejae-frontend:latest-${{ env.ENVIRONMENT }}

      - name: Deploy Container
        run: |
          container_name="taejae-frontend-${{ env.ENVIRONMENT }}"
          echo "Deploying container: $container_name"
          
          # Stop and remove existing container
          sudo docker stop $container_name 2>/dev/null || true
          sudo docker rm $container_name 2>/dev/null || true
          
          # Pull latest image
          sudo docker pull ${{ env.NCP_REGISTRY }}/taejae-frontend:${{ env.IMAGE_TAG }}
          
          # Run new container
          sudo docker run -d \
            --name $container_name \
            -p 3000:3000 \
            --restart unless-stopped \
            --memory=512m \
            --memory-swap=512m \
            --log-driver json-file \
            --log-opt max-size=100m \
            --log-opt max-file=5 \
            -e NODE_ENV=${{ env.ENVIRONMENT }} \
            -e NEXT_PUBLIC_API_URL=${{ env.ENVIRONMENT == 'prod' && 'https://taejae.ac.kr/api' || 'https://dev.taejae.ac.kr/api' }} \
            -e DEPLOY_TIME="$(date '+%Y-%m-%d %H:%M:%S')" \
            -e GIT_COMMIT=${{ github.sha }} \
            ${{ env.NCP_REGISTRY }}/taejae-frontend:${{ env.IMAGE_TAG }}
          
          echo "Container deployed successfully"
          
          # Clean up old images
          sudo docker image prune -f

      - name: Health check
        run: |
          sleep 10
          curl -f http://localhost:3000/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ env.ENVIRONMENT }} succeeded!"
          else
            echo "❌ Deployment to ${{ env.ENVIRONMENT }} failed!"
          fi
